@model EK_tracker.Models.RegisterViewModel;
@inject Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.IdentityOptions> IdentityOptions;

@section Styles {
    <link href="css/views/Register.css" rel="stylesheet" type="text/css" />
}

<div class="limiter">
    <div class="wrapper">
        <div class="login-card">
            <form class="form" method="post" asp-controller="Register" asp-action="Index">
                <h1 class="login-text poppins-bold-italic">Register</h1>
                <div class="wrap-input">
                    <span class="label-input username poppins-regular">Username</span>
                    <input class="input-form" asp-for="UserName" type="text" placeholder="Type your username" />
                    <span class="focus-input" data-symbol="&#xf206;"></span>
                    <span asp-validation-for="UserName" class="text-danger"></span>
                </div>
                <div class="wrap-input">
                    <span class="label-input firstname poppins-regular">First Name</span>
                    <input class="input-form" asp-for="FirstName" type="text" placeholder="Type your first name" />
                    <span class="focus-input" data-symbol="&#xf206;"></span>
                    <span asp-validation-for="FirstName" class="text-danger"></span>
                </div>
                <div class="wrap-input">
                    <span class="label-input lastname poppins-regular">Last Name</span>
                    <input class="input-form" asp-for="LastName" type="text" placeholder="Type your last name" />
                    <span class="focus-input" data-symbol="&#xf206;"></span>
                    <span asp-validation-for="LastName" class="text-danger"></span>
                </div>
                <div class="wrap-input">
                    <span class="label-input poppins-regular">Email</span>
                    <input type="text" class="input-form" asp-for="Email" placeholder="Type your email address" />
                    <span class="focus-input" data-symbol="&#xf0e0;"></span>
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>

                <div class="wrap-input password">
                    <span class="label-input password poppins-regular">Password</span>
                    <input class="input-form poppins-medium" id="password-input" asp-for="Password" type="password" placeholder="Type your password" />
                    <span class="focus-input" data-symbol="&#xf190;"></span>
                    <span id="password-validation"class="text-danger"></span>
                </div>

                <div class="wrap-input password">
                    <span class="label-input password poppins-regular">Confirm Password</span>
                    <input class="input-form poppins-medium" id="confirmPassword" asp-for="ConfirmPassword" type="password" placeholder="Type your password" />
                    <span class="focus-input" data-symbol="&#xf190;"></span>
                    <span asp-validation-for="ConfirmPassword" id="confirmPasswordError" class="text-danger"></span>
                </div>

                <div class="forgot-password"><a asp-controller="Login" asp-action="Index">Already have an account?</a></div>
                <div class="login-form-button">
                    <div class="wrap-login-button">
                        <div class="form-button-background"></div>
                        <button type="submit" class="login-button poppins-medium" value="register">Register</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const passwordOptions = {
            RequiredLength: @IdentityOptions.Value.Password.RequiredLength,
            RequiredDigit: @IdentityOptions.Value.Password.RequireDigit.ToString().ToLower(),
            RequireLowercase: @IdentityOptions.Value.Password.RequireLowercase.ToString().ToLower(),
            RequireUppercase: @IdentityOptions.Value.Password.RequireUppercase.ToString().ToLower(),
            RequireNonAlphanumeric: @IdentityOptions.Value.Password.RequireNonAlphanumeric.ToString().ToLower()
        }

        const passwordInput = document.querySelector("#password-input");
        const passwordValidationError = document.querySelector("#password-validation");

        const confirmPasswordInput = document.querySelector("#confirmPassword");
        const confirmPasswordError = document.querySelector("#confirmPasswordError");

        passwordInput.addEventListener("input", (event) => {
            const password = event.target.value;
            
            if (password.length < passwordOptions.RequiredLength) {
                passwordValidationError.innerHTML = `Password must be at least ${passwordOptions.RequiredLength} characters long`;
            } else if (passwordOptions.RequiredDigit && !/\d/.test(password)) {
                passwordValidationError.innerHTML = "The password has to include a digit";
            } else if (passwordOptions.RequireLowercase && !/[a-z]/.test(password)) {
                passwordValidationError.innerHTML = "The password must include a lowercase letters";
            } else if (passwordOptions.RequireUppercase && !/[A-Z]/.test(password)) {
                passwordValidationError.innerHTML = "The password must include an uppercase letter";
            } else if (passwordOptions.RequireNonAlphanumeric && !/[^a-zA-Z\d\s:]/.test(password)) {
                passwordValidationError.innerHTML = "The password must include a special symbol";
            } else {
                passwordValidationError.innerHTML = "";
            }
        });

        confirmPasswordInput.addEventListener("input", (event) => {
            const confirmPassword = event.target.value;
            if (confirmPassword != passwordInput.value) {
                confirmPasswordError.innerHTML = "Passwords do not match";
            } else {
                confirmPasswordError.innerHTML = "";
            }
        });
    </script>
}
